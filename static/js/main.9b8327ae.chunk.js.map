{"version":3,"sources":["components/AnimatedBackground.js","components/Current.js","components/FetchTimeApi.js","App.js","reportWebVitals.js","index.js"],"names":["AnimatedBackground","className","Current","current","undefined","weather","url","icon","src","alt","description","style","width","temp","humidity","wind_speed","FetchTimeApi","useState","setCurrent","useEffect","navigator","console","log","getCoords","a","geolocation","getCurrentPosition","position","data","lat","coords","latitude","lon","longitude","getData","alert","fetch","response","json","height","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0OAGaA,EAAqB,WAC9B,OACI,qBAAKC,UAAU,UAAf,SACI,sBAAKA,UAAU,MAAf,UACI,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,8B,8BCZHC,G,YAAU,SAAC,GAAe,IAAdC,EAAa,EAAbA,QAErB,QAAeC,IAAZD,EACC,OAAO,6BACL,IAAIA,EAAQE,QACd,OAAO,6BAIX,IAAIC,EAAG,2CAAuCH,EAAQE,QAAQ,GAAGE,KAA1D,WAGP,OACI,sBAAKN,UAAU,4BAAf,UACI,qBAAKA,UAAU,mBAAmBO,IAAKF,EAAKG,IAAKN,EAAQE,QAAQ,GAAGK,YAAaC,MAAO,CAACC,MAAO,iBAEhG,sBAAKX,UAAU,YAAf,UACI,qBAAIA,UAAU,gBAAd,UAA+BE,EAAQU,KAAvC,UACA,sBAAKZ,UAAU,QAAf,UACI,oBAAGA,UAAU,eAAb,uBAAuCE,EAAQW,SAA/C,OACA,oBAAGb,UAAU,eAAb,mBAAmCE,EAAQY,WAA3C,qBCpBPC,EAAe,WAExB,MAA8BC,mBAAS,IAAvC,mBAAOd,EAAP,KAAgBe,EAAhB,KAEAC,qBAAU,WACF,gBAAiBC,UACjBC,QAAQC,IAAI,aAEZD,QAAQC,IAAI,iBAGhBC,MACD,IAEH,IAAMA,EAAS,uCAAG,sBAAAC,EAAA,sDACdJ,UAAUK,YAAYC,oBAAoB,SAAAC,GAEtC,IAAMC,EAAO,CACTC,IAAKF,EAASG,OAAOC,SACrBC,IAAKL,EAASG,OAAOG,WAEzBC,EAAQN,MAET,WACCO,MAAM,iIAVI,2CAAH,qDAcTD,EAAO,uCAAG,WAAMJ,GAAN,mBAAAN,EAAA,6DACNlB,EADM,8DACuDwB,EAAOD,IAD9D,gBACyEC,EAAOE,IADhF,yFAEWI,MAAM9B,GAFjB,cAEN+B,EAFM,gBAGOA,EAASC,OAHhB,OAGNA,EAHM,OAIZpB,EAAWoB,EAAKnC,SAJJ,2CAAH,sDASb,OACI,sBAAKF,UAAU,+DAA+DU,MAAO,CAAE4B,OAAQ,SAA/F,UACI,oBAAItC,UAAU,gDAAd,sBACA,cAAC,EAAD,CAASE,QAASA,QC/BfqC,EATH,WACV,OACE,qCACE,cAAC,EAAD,IACA,cAAC,EAAD,QCISC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.9b8327ae.chunk.js","sourcesContent":["import React from 'react'\nimport './AnimatedBackground.css';\n\nexport const AnimatedBackground = () => {\n    return (\n        <div className=\"wrapper\">\n            <div className=\"box\">\n                <div></div>\n                <div></div>\n                <div></div>\n                <div></div>\n                <div></div>\n                <div></div>\n                <div></div>\n                <div></div>\n                <div></div>\n                <div></div>\n            </div>\n            \n        </div>\n    )\n}\n","import React from 'react'\nimport './Current.css'\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nexport const Current = ({current}) => {\n\n    if(current === undefined){\n        return <></>\n    }else if(!current.weather){\n        return <></>\n    }\n\n\n    let url = `http://openweathermap.org/img/wn/${current.weather[0].icon}@2x.png`\n\n\n    return (\n        <div className=\"card m-3 text-light dGrid\">\n            <img className=\"card-img-top row\" src={url} alt={current.weather[0].description} style={{width: 'fit-content'}}/>\n\n            <div className=\"card-body\">\n                <h5 className=\"card-title h1\">{current.temp}Â°</h5>\n                <div className=\"specs\">\n                    <p className=\"card-text h5\">Humidity: {current.humidity}%</p>\n                    <p className=\"card-text h5\">Wind: {current.wind_speed} m/s</p>\n                </div>\n            </div>\n        </div>\n    )\n\n}\n","import React, {useEffect, useState} from 'react'\n\nimport {Current} from './Current'\n\nexport const FetchTimeApi = () => {\n\n    const [current, setCurrent] = useState({})\n\n    useEffect(() => {\n        if (\"geolocation\" in navigator) {\n            console.log(\"Available\");\n        } else {\n            console.log(\"Not Available\");\n        }\n\n        getCoords()\n    }, [])\n\n    const getCoords = async () => {\n        navigator.geolocation.getCurrentPosition( position => {\n\n            const data = {\n                lat: position.coords.latitude,\n                lon: position.coords.longitude\n            }\n            getData(data)\n      \n        }, () => {\n            alert(\"You can't see the content of this page, if you don't give permission to geolocation, please reload the page and try again.\")\n        });\n    }\n\n    const getData = async(coords) => {\n        const url = `https://api.openweathermap.org/data/2.5/onecall?lat=${coords.lat}&lon=${coords.lon}&units=metric&exclude=hourly,minutely&appid=35b12780d58712af0ea68c3f0cacbba0`\n        const response = await fetch(url)\n        const json = await response.json()\n        setCurrent(json.current)\n    }\n\n\n\n    return (\n        <div className=\"d-flex justify-content-center align-items-center flex-column\" style={{ height: '100vh' }}>\n            <h1 className=\"position-relative text-light text-center mb-5\" >Time App</h1>\n            <Current current={current} />\n            \n            {/* { current.rain ? current.rain : null} */}\n        </div>\n    )\n}","import React from 'react'\nimport { AnimatedBackground } from './components/AnimatedBackground'\nimport { FetchTimeApi } from './components/FetchTimeApi'\n\nconst App = () => {\n  return (\n    <>\n      <AnimatedBackground />\n      <FetchTimeApi />\n    </>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}